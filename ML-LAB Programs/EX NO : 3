import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.impute import SimpleImputer
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score

# Load dataset
file_path = "housing.csv"  # Update this path if needed
df = pd.read_csv(file_path)

# Create a classification target (high price vs. low price)
median_value = df["median_house_value"].median()
df["price_category"] = (df["median_house_value"] >= median_value).astype(int)

# Drop the original target column
df = df.drop(columns=["median_house_value"])

# Handle missing values in total_bedrooms
imputer = SimpleImputer(strategy="median")
df["total_bedrooms"] = imputer.fit_transform(df[["total_bedrooms"]])

# Encode categorical feature 'ocean_proximity' using one-hot encoding
df = pd.get_dummies(df, columns=["ocean_proximity"], drop_first=True)

# Define features (X) and target (y)
X = df.drop(columns=["price_category"])
y = df["price_category"]

# Standardize numerical features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Split data into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

# Train KNN classifier
knn = KNeighborsClassifier(n_neighbors=5)
knn.fit(X_train, y_train)

# Predict and evaluate
y_pred = knn.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)

print(f"KNN Classification Accuracy: {accuracy:.4f}")
