import pandas as pd
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import silhouette_score

# Load dataset (Ensure correct file path)
file_path = "codon_usage.csv"
df = pd.read_csv(file_path, low_memory=False)

# Convert codon frequency columns to numeric, handle missing values
codon_columns = df.columns[5:]
df[codon_columns] = df[codon_columns].apply(pd.to_numeric, errors='coerce').fillna(0)

# Sample 2000 rows for faster computation
df_sampled = df.sample(n=min(2000, len(df)), random_state=42)  # Avoid error if dataset < 2000 rows
X_scaled = StandardScaler().fit_transform(df_sampled[codon_columns])

# Find optimal k using elbow method & silhouette score
k_range = range(2, 11)
inertia, silhouette_scores = [], []

for k in k_range:
    kmeans = KMeans(n_clusters=k, random_state=42, n_init=10)
    labels = kmeans.fit_predict(X_scaled)
    inertia.append(kmeans.inertia_)
    silhouette_scores.append(silhouette_score(X_scaled, labels))

# Plot elbow method & silhouette score
fig, ax = plt.subplots(1, 2, figsize=(10, 4))
ax[0].plot(k_range, inertia, 'bo-')
ax[0].set_xlabel('Clusters'); ax[0].set_ylabel('Inertia'); ax[0].set_title('Elbow Method')
ax[1].plot(k_range, silhouette_scores, 'ro-')
ax[1].set_xlabel('Clusters'); ax[1].set_ylabel('Silhouette Score'); ax[1].set_title('Silhouette Analysis')
plt.show()

# Determine best k
optimal_k = k_range[silhouette_scores.index(max(silhouette_scores))]
print(f"Optimal number of clusters: {optimal_k}")

# Apply K-Means with optimal k
df_sampled['Cluster'] = KMeans(n_clusters=optimal_k, random_state=42, n_init=10).fit_predict(X_scaled)

# Display sample output
print(df_sampled[['SpeciesName', 'Cluster']].head(10))
